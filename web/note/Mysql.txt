数据库：
	表：列、行、主键
	列叫做字段，有字段名称、字段数据类型、字段约束、字段长度4个属性
	
	DQL：数据库查询语言；(SELECT...)
	DML：数据库操纵语言；(INSERT...)
	
	
	插入 insert into table_nale(column1,column2,...) values(value1,value2,...)
	更新 update table_name set column = new_value where column2 = some_value
	删除 delete from table_name where column = some_value
	复制 select * into new_table_name from old_table_name
	外键 create table table_name (id_p int ,
								  foreign key(id_p) refrences aother_table_name(column))
		 create table table_name (id_p int ,
								  constraint fk foreign key(id_p) refrences aother_table_name(column))
	索引 create index index_name on talble table_name(colum_name)
	添加列 alter table table_name add column_name data_type
	删除列 alter table table_name drop column column_name
	分组 select coulume_name count(column_name) group by column_name
		 select coulume_name count(column_name) group by column_name having count(column_name) > 3 

	数据类型
		char(size)  定长  最大255
		varchar(size) 变长 最大255
		tinytext  最大255
		text  最大65535
		blob  最大65535
		mediumblob 最大2^24
		longText 最大2^32
		longblob 最大2^32
		
		tinyint 255
		smallint 65535
		mediumint 2^24
		int 2^32
		bigint 
		float
		double
		
		date
		datatime
		timestamp
		
	
	
	一个完整的DQL语句总结：
		select	
				...
		from
				...
		where
				...
		group by
				...
		having
				...
		order by
				...
		（1）以上的关键字顺序不能变
		（2）执行顺序：
			1.from       从某张表中检索数据
			2.where	     经过某条件进行过滤
			3.group by   分组
			4.having     分组后再过滤
			5.select     查询
			6.order by   排序输出
			
	查询：
		在进行多表连接查询的时候，尽量给表起别名，这样效率高。
		在连接查询的时候，虽然使用了限制条件，但是匹配次数并没有减少
		多表连接：a连接b ， 再 连接c
			select 
				xxx
			from
				a
			join
				b
			on
				条件
			join
				c
			on
				条件
		
			
	约束：
		主键：
			表中的某个字段添加主键约束后，该字段称为主键字段，主键字段中出现的每一个数据都被称为主键值。
			
			给某个字段添加主键约束后，该字段不能重复也不能为空，效果和“not null unique”相同
			
			主键字段会默认添加索引
			
			主键值是当前数据的唯一标识
			
			无论单一主键还是复合主键，一张表的主键约束只能有一个
			
			自然主键：和表中业务无任何关系
			业务主键：和表中业务相关
			
		外键 foreign key：
			一张表中可以有多个外键。
			
			外键字段去引用一张表的某个字段的时候，被引用的字段必须具有unique约束
			
			有了外键引用之后，表分为父表和子表。创建时，先创建父表，再创建子表，删除时，先删除字表，再删除父表，插入时，先插入父表，再插入子表
			
			典型的一对多设计，在多的一方加外键。
			
	视图：
		视图就是一条SELECT语句执行后返回的结果集。所以我们在创建视图的时候，主要的工作就落在创建这条SQL查询语句上。
		
		那么哪些操作可以在视图上进行呢？

			视图与表是一对一关系情况：如果没有其它约束（如视图中没有的字段，在基本表中是必填字段情况），是可以进行增删改数据操作；		
			
	事务：
		一个最小的不可再分的工作单元。
		通常一个事务对应一个完整的业务。
		一个完整的业务需要批量的DML语句（insert，update，delete）完成。
		
		事务的4个特性：
			原子性:事务是最小的工作单元，不可再分
			一致性：事务要求所有的DML语句操作时同时成功或者同时失败
			隔离性：事务A和事务B之间具有隔离
			持久性：是事务终结的标志【内存中的数据数据持久到硬盘文件里】
			
		事务开启的标志：
		
		事务结束的标志：
			提交（commit）：成功的结束；
			回滚（roll back）：失败的结束。清空DML操作记录。
			
		Mysql关闭自动提交机制的方式：
			方式1：
				start transaction；手动开启事务
				DML语句...
				DML语句...
				DML语句...
				comit;(rollback)   手动提交事务（手动回滚事务）
			方式2:
				SET AUTOCOMMIT=OFF;
				或者
			    SET SESSION AUTOCOMMIT = OFF；
				
		事务的隔离性：
			四个隔离级别：
				-read uncomitted 读未提交
					事务A未提交的数据事务B可以读取到，读到的是脏数据，这种隔离级别是最低级别，数据库默认的隔离级别一般高于该级别
				-read committed  读已提交
					事务A提交的数据，事务B才可以读取 
					会导致"不可重复读取"
				-repeatable read 可重复读
					事务A提交后的数据，事务B读取不到，避免“不可重复读取”，但是会导致“幻象读”
				-serializable 串行化
					事务A在操作数据库表中的数据时事务B只能排队
					可避免“幻象读”（eg：连续两个事务select结果不一样就是幻象读）
					
			设置隔离级别的方式：
			1.修改配置文件
			2.命令方式，可以设置为作用于全局或作用于当前回话。
				set （global） transaction isolation level <level>
			查看隔离级别
				查看当前回话隔离级别：
					select @@tx_isolation
				查看全局的事务的隔离级别
					select @@global.tx_isolation
					
	索引：
		在MYSQL管理系统中，对表中记录进行检索的时候，通常包含几种检索方式；
			-第一种：全表扫描【效率较低】；
			-第二种：通过索引进行检索 【提高查询效率】
			
		主键自动添加索引。
			
		什么情况下适合给表中某个字段加索引:
			-该字段数据量庞大
			-该字段很少DML操作（DML操作很多的话索引需要维护，效率降低）
			-该字段经常出现在where当中
			
		创建索引：
			create index 索引名 on 表名（列名）
			create unique index 索引名 on 表名（列名）         unique表示给字段添加唯一性约束
		删除索引
			drop index 索引名 on 表名
			
	存储引擎
		MyISam
			使用三个文件表示每个表：
				格式文件-存储表结构的定义(mytable.frm)
				数据文件-存储表行的内容(mytable.MYD)
				索引文件-存储表上索引(mytable.myi)
			支持压缩，只读以节省空间
				
		InnoDB
			每个InnoDB表在数据库目录帐以.frm格式文件表示
			支持事务
			mysql服务器崩溃后自动恢复
			
		Memory
			表数据和索引在内存中
						
	数据库设计三范式：
		1.要求有主键，每一个字段的原子性不可再分
		2.非主键字段必须完全依赖主键，不能产生部分依赖（尽量别使用联合主键，容易产生部分依赖，产生数据冗余）
		3.非主键字段不能传递依赖于主键字段
		
		一对一设计：
			方案一：分两张表存储，共享主键
			t_husband
			hno(pk)     name
			-----------------------
			1            Jake
			2            Bob
			3            Mike
			
			t_wife
			wno          wname
			------------------------
			3            Lucy
			2            Nancy
			1            Lili
			方案二；分两张表存储，外键唯一
						t_husband
			hno(pk)     name     wifino（fk-unique）
			---------------------------------------
			1            Jake    300
			2            Bob     200
			3            Mike    100
			
			t_wife
			wno          wname
			------------------------
			300            Lucy
			200            Nancy
			100            Lili
		一对多设计：分两张表存储，在多的一方添加外键，这个外键引用一的一方的主键
		多对多设计：分三张表（eg：学生表存储学生信息，课程表存储课程信息，在学生选课表中存储学生和选课的关系信息）
			
			
		
				
					 
			
		
	