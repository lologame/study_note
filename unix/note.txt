套接字编程
    客户端 socket()->connect()->write()/read()->close()
    服务端 socket()->bind()->listen()->accept()->read()/write()->read()->close

    listen(socket,backlog) backlog为相应套接字排队的最大连接数
    内核为任何一个监听套接字维护未完成连接队列(等待完成三次握手)和已完成连接队列(已经完成三次握手)

    accept 从已完成连接队列头返回下一个连接，如果队列为空，则进程进入睡眠

    pid fork(void) 返回值在子进程中为0，父进程中为子进程id
    fork的两个典型用法：1)进程创建自身的副本(并发服务器中，每收到一个新的请求则fork一个进程来处理)。2）通过fork创建副本，副本调用exec把自身替换成新进程

    close(socket) 并发服务器中父进程关闭已连接套接字只是导致相应的描述符引用计数减一，描述符引用计数减至0才会导致四次挥手。

cs
    信号
        信号就是告知某个进程发生了某个事件的通知，也称为软件中断，通常是异步的
        信号可以：1）进程发给进程；2）内核发给进程
        每个信号都有一个与之关联的行为。
        signal(信号名，指向函数的指针)

        任何一个子进程(init除外)在exit后并非马上就消失，而是留下一个称外僵尸进程的数据结构，等待父进程处理。这是每个子进程都必需经历的阶段。另外子进程退出的时候会向其父进程发送一个SIGCHLD信号。
        
    wait()函数
        进程一旦调用了wait，就立即阻塞自己，由wait自动分析是否当前进程的某个子进程已经退出，如果让它找到了这样一个已经变成僵尸的子进程，wait就会收集这个子进程的信息，并把它彻底销毁后返回；如果没有找到这样一个子进程，wait就会一直阻塞在这里，直到有一个出现为止。

    网络编程三种情况
        1）fork子进程必须捕获SIGCHLD信号
        2）捕获信号时，必须处理被中断的系统调用
        3）SIGCHLD信号的处理函数使用waitpid处理僵死进程

IO复用
    内核一旦发现进程指定的一个或多个IO条件就绪，就通知进程的能力。

    IO复用使用场景
        客户处理多个描述符(交互输入和网络套接字)
        处理多个套接字
        既要处理监听套接字，又要处理已连接套接字
        既要处理TCP,又要处理UDP

    unix下的5中IO模型
        阻塞式IO
        非阻塞式IO
        IO复用（select ， poll）
        信号驱动式IO（sigio）
        异步IO（aio）

    select函数
        slect(maxdpl, readSet, writeset, excepset, timeout) 
        允许进程指示内核等待多个事件中的一个发生

    poll函数
        与select类似，在处理流设备时，提供额外的信息
        int poll(struct pollfd *fdarray, long nfds, int timeoout)
        struct pollfd{
            int fd;
            shrot events;
            short rentvs;
        }
        测试条件由events指定，revents中返回该描述符的状态



    
